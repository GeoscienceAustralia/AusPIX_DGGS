import pygeoj

import math
#import rhealpixdggs # used module instead
import concurrent.futures
import numpy as np
import time
start = time.perf_counter()

from rhealpixdggs.dggs import RHEALPixDGGS  # from imported module

rdggs = RHEALPixDGGS()  # make an instance

'''
developed by Joseph Bell at Geoscience Australia June/August  2020
'''

def chunks(l, n):
    return [l[i:i+n] for i in range(0, len(l), n)]


def densify_my_line(line_to_densify, resolution):
    '''
    densify a line based on the resolution of the cells
    designed to return a continuous string of ajoining DGGS cells along a line feature
    '''

    resArea = (rdggs.cell_area(resolution, plane=False))  # ask engine for area of cell
    # math to define a suitable distance between vertices - ensures good representation of the line - a continuous run of cells to define the line
    min_dist = math.sqrt(float(resArea))/300000  # width of cell changes with sqrt of the area - 300000 is a constant that can be changed but will change output

    try:
        # first try multi-line construct (on failure try single line)
        for line_points in line_to_densify:
            edgeData = []  # we are going to make a list of edges based on pairs of vertices
            previous = (0, 0)  # placeholder for previous point
            for vertex in line_points:
                #print(vertex)
                if previous != (0, 0):  # not the beginning
                    newEdgeMulti = (previous, vertex)
                    #print('new edge', newEdge)
                    edgeData.append(newEdgeMulti)
                    previous = vertex  # remember for the next iteration
                else:
                    previous = vertex
            # now calculate the length of segment
            new_line = []
            for edge in edgeData:
                dx = edge[1][0] - edge[0][0]
                dy = edge[1][1] - edge[0][1]
                #print('dxdy', dx, dy)
                line_length = math.sqrt((dx*dx) + (dy*dy))  # length in degrees
                segments = round(line_length / min_dist)  # figure number of segments needed
                if segments == 0:  # cannot be 0
                    segments = 1  # chage zero to to one
                densified_line = (split([edge[1][0], edge[1][1]], [edge[0][0], edge[0][1]], segments))  #using split function below

                new_line.append(densified_line)  # add this segment into the output line

    except:
        # try for single line construct
        edgeData = []  # we are going to make a list of edges based on pairs of vertices
        previous = (0, 0)  # placeholder for previous point
        for vertex in line_to_densify:  # this is the outer [] for multi-line object
            if previous != (0, 0):  # not the beginning
                newEdge = (previous, vertex)
                print('new edge', newEdge)
                edgeData.append(newEdge)
                previous = vertex  # remember for the next iteration
            else:
                previous = vertex
            # now calculate the length of segment
            new_line = []
        for segment in edgeData:
            print('segment', segment)
        for edge in edgeData:
            print('myEdge', edge)
            dx = edge[1][0] - edge[0][0]
            dy = edge[1][1] - edge[0][1]
            #print('dxdy', dx, dy)
            line_length = math.sqrt((dx*dx) + (dy*dy))  # length in degrees
            segments = round(line_length / min_dist)  # figure number of segments needed
            if segments == 0:  # cannot be 0
                segments = 1  # chage zero to to one
            densified_line = (split([edge[1][0], edge[1][1]], [edge[0][0], edge[0][1]], segments))  #using split function below

            new_line.append(densified_line)  # add this segment into the output line


    if (len(new_line)) == 0:
       print('error nothing returned')
    return new_line  # we return this line in the datset with extra points along it (densified)

def split(start, end, segments):
    '''
   add vertices to a line to densify
   must decide on how many segments you need using the densify_my_line function above
   usually called from the densify_my_line function
    '''
    x_delta = (end[0] - start[0]) / float(segments)
    y_delta = (end[1] - start[1]) / float(segments)
    points = []
    for i in range(1, segments):
        points.append([start[0] + i * x_delta, start[1] + i * y_delta])
    return [start] + points + [end]


def dggs_enable_line(thisTile):
    '''  takes a geojson file and adds AusPix DGGS cell information at the resolution called for
        maintains any properties data for out but at the end
        AusPix data in the first columns - then the properties data
        '''
    resolution = 12  # change to adjust cell size
    myOutput_location_and_name = r"D:\graheam\output\ACT_Roads_"  + str(thisTile[1])# setup a unique name for this tile
    print('doing', myOutput_location_and_name )

    # calc cell area in m2
    resArea = (rdggs.cell_area(resolution, plane=False))  # area od the cell at this resolution

    newfile = pygeoj.new()  # default projection is WGS84

    doneDGGScells = {}  # dictionary keeps track od done cells so no repeats
    # work through the features (lines) one by one and ask for DGGS cells
    for fea in (thisTile[0]):   #each feature is an individual line
        #print('')
        #print('feature attributes ', feature.properties)  # the feature attributes - want to keep for output

        coords = fea.geometry.coordinates  # collect the xy's points along line
        #print('in_coords= ', (coords))
        densified_coords = densify_my_line(coords, resolution) # call the densify function to ensure engough points along the line
        for item in densified_coords: # choose the lines one at a time
            for coords in item:  # for this road or straight line look at all the points that describe it
                thisDGGS = rdggs.cell_from_point(resolution, coords, plane=False)  # find the DGGS cell each point belongs to
                if str(thisDGGS) not in doneDGGScells:  # making sure cells are only done once
                    doneDGGScells[str(thisDGGS)] = thisDGGS   # save as a done cell
                    verts = thisDGGS.vertices(plane=False)  # find the cell corners = vertices from the engine
                    verts.append(verts[0]) #add the first point to the end to make a closed poly
                    #print('doing', str(thisDGGS))

                    my_prop = fea.properties # grab the existing attributes from this feature - to carrry to output file

                    my_Cell = {"AusPIX_DGGS": str(thisDGGS), "CellArea_M2": resArea}  # set up the dGGS information

                    these_attributes = dict(list(my_Cell.items()) + list(my_prop.items()))  # make up all the attributes for output

                    # add the infomation to output file
                    newfile.add_feature(properties=these_attributes,   geometry={"type": "Polygon", "coordinates": [verts]})

     #save the ouput geojson file
    newfile.save(myOutput_location_and_name + '.geojson') # saving file

if __name__ == "__main__":
    thisfile = pygeoj.load(filepath=r'D:\ACT\ACT_Road_centrelines.geojson')
    print( 'len thisFile', len(thisfile), 'lines')

    #dividde the features into blocks or tiles
    arr = np.array(thisfile)
    tiles = np.array_split(arr, 40)   # number is how many tiles you want - not exactly tiles but actually parts

    print('number of tiles/blocks = ', len(tiles))

    my_data = []
    count = 0
    #print('first tile', tiles[0])

    for tile in tiles:
        count += 1
        my_data.append([tile, count])  # adding a number to each part/tile for output reasons

    with concurrent.futures.ProcessPoolExecutor(max_workers=12) as executor:    # use this one for multi processors = 12 depending on computer cores
        results = [executor.submit(dggs_enable_line, s) for s in my_data]


    # for  item in my_data: # enable this section to use just one processor with benifit od being able to see errors
    #     dggs_enable_line(item)


    #to merge the files it one if needed use 'Merge vector layers' in QGIS
#(this part of script not working)
    # import json  
    # import glob
    #
    # result = []
    # for f in glob.glob("D:\graheam\output\*.geojson"):
    #     print('now merging ', f)
    #     with open(f, "r") as infile:
    #         result.append(json.load(infile))
    #
    # with open(r"D:\graheam\output\merged_file.geojson", "w") as outfile:
    #     json.dump(result, outfile)
    # creates a bad file ##############################################
    #
    print('finished')

    # time it
    finish = time.perf_counter()
    print(f'Total Finished at {(finish - start)/60} mins ###########################')
